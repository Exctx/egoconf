
getInitialState: function() {
    return {
        term: ''
    };
  },

buildQueryBody: function(query, term, matchWholePhrase) {
  if( matchWholePhrase ) {
    var body = query.body = {};
    body.query = {
      // match_phrase matches the phrase exactly instead of breaking it
      // into individual words
      "match_phrase": {
      // this is the field name, _all is a meta indicating any field
        "_all": term
      }
    }
  }
  else {
    query.q = term;
  }
},

buildQuery: function(searchTerm) {
  // this just gets data out of the form
  var index = "tags";
  var type = "tags";
  var term = searchTerm;
  var matchWholePhrase = true;

  // skeleton of the JSON object we will write to DB
  var query = {
    index: index,
    type: type
  };

  this.buildQueryBody(query, term, matchWholePhrase);

  return query;
},

// conduct a search by writing it to the search/request path
doSearch: function(query) {
  var ref = firebase.database().ref('search');
  var key = ref.child('request').push(query).key;

  ref.child('response/'+key).on('value', this.showResults);
},

// when results are written to the database, read them and display
showResults: function(snap) {
  if( !snap.exists() ) { return; } // wait until we get data
  var results = snap.val().hits;

  // when a value arrives from the database, stop listening
  // and remove the temporary data from the database
  snap.ref.off('value', this.showResults);
  snap.ref.remove();
  this.props.handleSearch(results);
},

handleChange: function(event) {
  this.setState({term: event.target.value});
},

handleSubmit: function(event) {
  event.preventDefault();
  this.doSearch(this.buildQuery(this.state.term));
},






<div>
      <div id="wrapper" v-on:keyup.esc="closeModal"> 
        <modal v-if="showModal"> 
          <h3 slot="header" class="modal-title">
            <button type="button" class="close" data-dismiss="modal" @click="closeModal()">&times;</button>
            <h4>Grade a quality</h4>
          </h3>
          <div slot="body" class="modal-body container">
            <vue-form :state="formstate" @submit.prevent="onSubmit" v-model="formstate">

              <validate auto-label class="form-group required-field" :class="">
                <label>Quality</label>
                <input type="text" name="quality" class="form-control" required v-model.lazy="message.quality" placeholder="Type in a quality you like to grade">

                <field-messages name="quality" show="$touched || $submitted" class="form-control-feedback">
                  <div slot="required" style="color: red">Quality is a required field</div>
                </field-messages>
              </validate>

              <validate auto-label class="form-group" :class="">
                <label>Project</label>
                <input type="text" name="project" class="form-control" v-model.lazy="message.project"  placeholder="Name the corresponding project">

                <field-messages auto-label name="project" show="$touched || $submitted" class="form-control-feedback">
                </field-messages>
              </validate>

              <validate auto-label class="form-group required-field" :class="">
                <label>Grade</label>
                <input type="number" name="grade" class="form-control" required v-model.lazy="message.grade" placeholder="Grade between 6 and 10" min="6" max="10">

                <field-messages auto-label name="grade" show="$touched || $submitted" class="form-control-feedback">
                  <div slot="required" style="color: red">Grade is a required field</div>
                  <div slot="min" style="color: red">Value must be greater or equal to 6</div>
                  <div slot="max" style="color: red">Value must be less than or equal to 10</div>
                </field-messages>
              </validate>

              <button type="submit" class="btn btn-primary float-right">Submit</button>
            </vue-form>
          </div>

          <div slot="footer">
          </div>
        </modal>
        <button type="button" class="btn btn-primary" @click="openModal()">Grade a quality</button>
      </div>
    </div>

    import Modal from '@/components/Modal' // taken from JuneRockwell/BootstrapVueModal
import VueForm from 'vue-form'

export default {
  mixins: [VueForm],
  components: {
    Modal
  }, 
  data: () => ({
    showModal: false,
    formstate: {},
    messages: []
  }),
  methods: {
    openModal () {
      this.showModal = true
    },
    closeModal () {
      this.showModal = false
    },
    onSubmit: function () {
      if (this.formstate.$invalid) {
        // alert user and exit early
        // return
      }
      // otherwise submit form
    }
  }
}

<style>
  .btn{
    margin-top:10px;
    margin-right:10px;
    margin-bottom:10px;
    margin-left:10px;
  }
  #wrapper {
    margin-top: 10px;
  }
  .modal-title {
    width: 100%;
  }
  .modal-body {
    text-align: left;
  }
  .required-field > label::after {
    content: '*';
    color: red;
    margin-left: 0.25rem;
  }
</style>